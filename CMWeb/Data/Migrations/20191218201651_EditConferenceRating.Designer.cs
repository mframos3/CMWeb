// <auto-generated />
using System;
using System.Collections.Generic;
using CMWeb.Data;
using CMWeb.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace CMWeb.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20191218201651_EditConferenceRating")]
    partial class EditConferenceRating
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("CMWeb.Areas.Identity.Data.CMWebUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("Name");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("CMWeb.Models.Conference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Edition");

                    b.Property<DateTime>("EndDate");

                    b.Property<int>("EventCenterId");

                    b.Property<string>("Sponsor");

                    b.Property<DateTime>("StartDate");

                    b.Property<int>("SuperConferenceId");

                    b.HasKey("Id");

                    b.HasIndex("EventCenterId");

                    b.HasIndex("SuperConferenceId");

                    b.ToTable("Conference");
                });

            modelBuilder.Entity("CMWeb.Models.ConferenceRating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<int>("ConferenceId");

                    b.Property<int>("Rating");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.ToTable("ConferenceRating");
                });

            modelBuilder.Entity("CMWeb.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ConferenceId");

                    b.Property<DateTime>("EndDate");

                    b.Property<int>("EventCenterRoomId");

                    b.Property<int>("EventType");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<DateTime>("StartDate");

                    b.Property<string>("Track")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ConferenceId");

                    b.HasIndex("EventCenterRoomId");

                    b.ToTable("Event");

                    b.HasDiscriminator<int>("EventType");
                });

            modelBuilder.Entity("CMWeb.Models.EventCenter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Location");

                    b.Property<string>("Name");

                    b.Property<string>("Phone");

                    b.HasKey("Id");

                    b.ToTable("EventCenter");
                });

            modelBuilder.Entity("CMWeb.Models.EventCenterRoom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Capacity");

                    b.Property<List<string>>("Equipment");

                    b.Property<int>("EventCenterId");

                    b.Property<string>("Location");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("EventCenterId");

                    b.ToTable("EventCenterRoom");
                });

            modelBuilder.Entity("CMWeb.Models.EventRating", b =>
                {
                    b.Property<int>("EventId");

                    b.Property<string>("UserId");

                    b.Property<string>("Comment");

                    b.Property<int>("Rating");

                    b.HasKey("EventId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("EventRating");
                });

            modelBuilder.Entity("CMWeb.Models.EventUser", b =>
                {
                    b.Property<int>("EventId");

                    b.Property<string>("UserId");

                    b.HasKey("EventId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("EventUser");
                });

            modelBuilder.Entity("CMWeb.Models.FileDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("EventId");

                    b.Property<string>("Name");

                    b.Property<string>("Path");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("CMWeb.Models.MealMenu", b =>
                {
                    b.Property<int>("MealId");

                    b.Property<int>("MenuId");

                    b.HasKey("MealId", "MenuId");

                    b.HasIndex("MenuId");

                    b.ToTable("MealMenu");
                });

            modelBuilder.Entity("CMWeb.Models.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Dessert");

                    b.Property<string>("Entree");

                    b.Property<string>("Main");

                    b.Property<string>("Name");

                    b.Property<string>("Soup");

                    b.HasKey("Id");

                    b.ToTable("Menu");
                });

            modelBuilder.Entity("CMWeb.Models.Notification", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("CMWeb.Models.SuperConference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<float>("Rating");

                    b.HasKey("Id");

                    b.ToTable("SuperConferences");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("CMWeb.Models.Chat", b =>
                {
                    b.HasBaseType("CMWeb.Models.Event");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("CMWeb.Models.Meal", b =>
                {
                    b.HasBaseType("CMWeb.Models.Event");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("CMWeb.Models.Party", b =>
                {
                    b.HasBaseType("CMWeb.Models.Event");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("CMWeb.Models.Talk", b =>
                {
                    b.HasBaseType("CMWeb.Models.Event");

                    b.Property<string>("Topic");

                    b.HasDiscriminator().HasValue(3);
                });

            modelBuilder.Entity("CMWeb.Models.Workshop", b =>
                {
                    b.HasBaseType("CMWeb.Models.Event");

                    b.HasDiscriminator().HasValue(4);
                });

            modelBuilder.Entity("CMWeb.Models.Conference", b =>
                {
                    b.HasOne("CMWeb.Models.EventCenter", "EventCenter")
                        .WithMany("Conferences")
                        .HasForeignKey("EventCenterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CMWeb.Models.SuperConference", "SuperConference")
                        .WithMany("Conferences")
                        .HasForeignKey("SuperConferenceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CMWeb.Models.Event", b =>
                {
                    b.HasOne("CMWeb.Models.Conference", "Conference")
                        .WithMany("Events")
                        .HasForeignKey("ConferenceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CMWeb.Models.EventCenterRoom", "EventCenterRoom")
                        .WithMany("Events")
                        .HasForeignKey("EventCenterRoomId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CMWeb.Models.EventCenterRoom", b =>
                {
                    b.HasOne("CMWeb.Models.EventCenter", "EventCenter")
                        .WithMany("EventCenterRooms")
                        .HasForeignKey("EventCenterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CMWeb.Models.EventRating", b =>
                {
                    b.HasOne("CMWeb.Models.Event", "Event")
                        .WithMany("EventRatings")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CMWeb.Areas.Identity.Data.CMWebUser", "User")
                        .WithMany("EventRatings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CMWeb.Models.EventUser", b =>
                {
                    b.HasOne("CMWeb.Models.Event", "Event")
                        .WithMany("EventUsers")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CMWeb.Areas.Identity.Data.CMWebUser", "User")
                        .WithMany("EventUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CMWeb.Models.FileDetails", b =>
                {
                    b.HasOne("CMWeb.Models.Event", "Event")
                        .WithMany("Files")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CMWeb.Models.MealMenu", b =>
                {
                    b.HasOne("CMWeb.Models.Meal", "Meal")
                        .WithMany("MealMenus")
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CMWeb.Models.Menu", "Menu")
                        .WithMany("MealMenus")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CMWeb.Areas.Identity.Data.CMWebUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CMWeb.Areas.Identity.Data.CMWebUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CMWeb.Areas.Identity.Data.CMWebUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CMWeb.Areas.Identity.Data.CMWebUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
